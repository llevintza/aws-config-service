name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  # Job 1: Check for outdated dependencies
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check for outdated dependencies
        id: outdated
        run: |
          yarn outdated --json > outdated.json || true

          if [ -s outdated.json ]; then
            echo "has_outdated=true" >> $GITHUB_OUTPUT
            echo "üì¶ Outdated dependencies found:"
            cat outdated.json | jq -r '.data.body[] | "\(.name): \(.current) -> \(.latest)"'
          else
            echo "has_outdated=false" >> $GITHUB_OUTPUT
            echo "‚úÖ All dependencies are up to date"
          fi

      - name: Security audit
        run: |
          yarn audit --json > audit.json || true

          if [ -s audit.json ]; then
            CRITICAL=$(cat audit.json | jq '.metadata.vulnerabilities.critical // 0')
            HIGH=$(cat audit.json | jq '.metadata.vulnerabilities.high // 0')
            
            echo "üîí Security audit results:"
            echo "Critical: $CRITICAL"
            echo "High: $HIGH"
            
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "‚ö†Ô∏è Security vulnerabilities found!"
            fi
          fi

      - name: Create issue for outdated dependencies
        if: steps.outdated.outputs.has_outdated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let outdatedData = [];
            try {
              const outdatedContent = fs.readFileSync('outdated.json', 'utf8');
              if (outdatedContent.trim()) {
                const parsed = JSON.parse(outdatedContent);
                outdatedData = parsed.data?.body || [];
              }
            } catch (error) {
              console.log('No outdated dependencies file or parsing error');
            }

            if (outdatedData.length === 0) {
              console.log('No outdated dependencies to report');
              return;
            }

            const title = `üîÑ Weekly Dependency Update Report - ${new Date().toISOString().split('T')[0]}`;

            let body = `## üì¶ Outdated Dependencies Report

            The following dependencies have newer versions available:

            | Package | Current | Latest | Type |
            |---------|---------|--------|------|
            `;

            outdatedData.forEach(dep => {
              body += `| ${dep.name} | ${dep.current} | ${dep.latest} | ${dep.type} |\n`;
            });

            body += `

            ## üîß Recommended Actions

            1. Review the changelog for each package to understand breaking changes
            2. Test updates in a feature branch before merging
            3. Update dependencies gradually, not all at once
            4. Pay special attention to major version updates

            ## ü§ñ Automated Commands

            To update all patch versions:
            \`\`\`bash
            yarn upgrade --pattern "*" --latest --exact
            \`\`\`

            To update specific packages:
            \`\`\`bash
            yarn upgrade package-name@latest
            \`\`\`

            ---
            *This issue was automatically created by the dependency check workflow.*
            `;

            // Check if similar issue exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependencies'
            });

            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Weekly Dependency Update Report')
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: title,
                body: body
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependencies', 'maintenance']
              });
            }

  # Job 2: Auto-update safe dependencies
  auto-update:
    name: Auto-update Dependencies
    runs-on: ubuntu-latest
    needs: [dependency-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Update patch and minor versions
        run: |
          # Update devDependencies safely
          yarn upgrade --pattern "@types/*" --latest
          yarn upgrade --pattern "eslint*" --latest
          yarn upgrade --pattern "prettier" --latest
          yarn upgrade --pattern "@typescript-eslint/*" --latest

          # Update specific safe packages (add more as needed)
          yarn upgrade typescript --latest
          yarn upgrade ts-node --latest

      - name: Check if changes were made
        id: changes
        run: |
          if git diff --quiet yarn.lock; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No dependency changes to commit"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Dependencies were updated"
          fi

      - name: Run tests after updates
        if: steps.changes.outputs.changes == 'true'
        run: |
          yarn install
          yarn type-check
          yarn lint:check || yarn lint:fix
          yarn build

      - name: Create Pull Request
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (automated)'
          title: 'ü§ñ Automated Dependency Updates'
          body: |
            ## ü§ñ Automated Dependency Updates

            This PR contains automated updates for safe dependencies:
            - Development dependencies
            - Type definitions
            - Linting tools
            - Build tools

            ### ‚úÖ Validation
            - [x] TypeScript compilation passes
            - [x] Linting passes
            - [x] Build completes successfully

            ### üìã Manual Review Required
            Please review the changes and test functionality before merging.

            ---
            *This PR was created automatically by the dependency update workflow.*
          branch: automated/dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated
            maintenance

  # Job 3: License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check licenses
        run: |
          npx license-checker --json > licenses.json

          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "LGPL-2.1" "LGPL-3.0")

          echo "üìÑ License compliance check:"

          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if cat licenses.json | jq -r '.[].licenses' | grep -q "$license"; then
              echo "‚ö†Ô∏è Found potentially problematic license: $license"
            fi
          done

          # Generate license report
          npx license-checker --summary

          echo "‚úÖ License check completed"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
