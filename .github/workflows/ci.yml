name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main', 'develop']

env:
  NODE_VERSION: '22'
  YARN_CACHE_FOLDER: ~/.yarn

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarCloud analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: TypeScript type checking
        run: yarn type-check

      - name: ESLint check
        run: yarn lint:check

      - name: Prettier formatting check
        run: yarn format:check

      - name: Check for security vulnerabilities
        run: yarn audit --level moderate

      - name: Check for outdated dependencies
        run: yarn outdated || true

  # Job 2: Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['22']

    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build

      - name: Verify build artifacts
        run: |
          test -d dist
          test -f dist/server.js
          echo "Build artifacts verified successfully"

      - name: Setup test environment
        run: |
          # Wait for DynamoDB to be ready
          echo "Waiting for DynamoDB to be ready..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:8000/ > /dev/null 2>&1; then
              echo "DynamoDB is ready on attempt $attempt"
              break
            fi
            echo "DynamoDB not ready, attempt $attempt/$max_attempts"
            sleep 2
            attempt=$((attempt + 1))
          done

          # Create DynamoDB tables for testing
          yarn dynamodb:create-table || echo "Table creation failed or already exists"
        env:
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8000

      - name: Run tests
        run: |
          # Add test command when tests are implemented
          echo "Tests would run here"
          # yarn test
        env:
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8000

      - name: Generate test coverage
        run: |
          # Add coverage command when tests are implemented
          echo "Test coverage would be generated here"
          # yarn test:coverage

      - name: Upload coverage to Codecov
        if: matrix.node-version == '22'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # Job 3: Docker Build and Security Scan
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality]

    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: aws-config-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          load: true

      - name: Setup Node.js for table creation
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies for DynamoDB setup
        run: yarn install --frozen-lockfile

      - name: Create DynamoDB tables
        run: yarn dynamodb:create-table
        env:
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8000

      - name: Test Docker container startup
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Wait for DynamoDB to be ready
          echo "Waiting for DynamoDB to be ready..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:8000/ > /dev/null 2>&1; then
              echo "DynamoDB is ready on attempt $attempt"
              break
            fi
            echo "DynamoDB not ready, attempt $attempt/$max_attempts"
            sleep 2
            attempt=$((attempt + 1))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "DynamoDB failed to start after $max_attempts attempts"
            exit 1
          fi

          # Start the container in detached mode
          docker run -d \
            --name aws-config-service-test \
            --network host \
            -e NODE_ENV=production \
            -e AWS_REGION=us-east-1 \
            -e DYNAMODB_ENDPOINT=http://localhost:8000 \
            -e PORT=3000 \
            aws-config-service:${{ github.sha }}

          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 15

          # Check if container is running
          if ! docker ps | grep aws-config-service-test; then
            echo "Container is not running"
            docker logs aws-config-service-test
            exit 1
          fi

          # Check application health with retry logic
          echo "Testing application health..."
          max_attempts=60
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "Health check passed on attempt $attempt"
              break
            fi
            echo "Health check failed, attempt $attempt/$max_attempts"
            sleep 2
            attempt=$((attempt + 1))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            echo "Container logs:"
            docker logs aws-config-service-test
            echo "Container status:"
            docker ps -a | grep aws-config-service-test
            exit 1
          fi

          # Test basic API functionality
          echo "Testing API endpoints..."
          health_response=$(curl -s http://localhost:3000/health)
          echo "Health response: $health_response"
          echo "$health_response" | jq . || echo "Response is not valid JSON"

          # Verify DynamoDB connectivity from within container
          echo "Testing DynamoDB connectivity..."
          docker exec aws-config-service-test curl -f http://localhost:8000/ || echo "DynamoDB connectivity test failed"

          # Clean up
          echo "Cleaning up..."
          docker stop aws-config-service-test
          docker rm aws-config-service-test

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: aws-config-service:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Dependency Check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'aws-config-service'
          path: '.'
          format: 'HTML'
          out: 'dependency-check-report'

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: dependency-check-report/

  # Job 5: Performance and Load Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance-test')

    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build

      - name: Setup test environment
        run: |
          # Wait for DynamoDB to be ready
          echo "Waiting for DynamoDB to be ready..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:8000/ > /dev/null 2>&1; then
              echo "DynamoDB is ready on attempt $attempt"
              break
            fi
            echo "DynamoDB not ready, attempt $attempt/$max_attempts"
            sleep 2
            attempt=$((attempt + 1))
          done

          # Create DynamoDB tables
          yarn dynamodb:create-table
        env:
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8000

      - name: Start application
        run: |
          yarn start &
          APP_PID=$!
          echo "Application PID: $APP_PID"
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 15

          # Verify application is running
          if ! curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "Application failed to start"
            ps aux | grep node
            exit 1
          fi
          echo "Application started successfully"
        env:
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8000

      - name: Run performance tests
        run: |
          # Install artillery for load testing
          npm install -g artillery
          # Create a basic load test config
          cat > artillery-test.yml << EOF
          config:
            target: 'http://localhost:3000'
            phases:
              - duration: 60
                arrivalRate: 10
          scenarios:
            - name: "Health check"
              requests:
                - get:
                    url: "/health"
          EOF
          artillery run artillery-test.yml

  # Job 6: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test]

    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build

      - name: Setup test environment
        run: |
          # Wait for DynamoDB to be ready
          echo "Waiting for DynamoDB to be ready..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:8000/ > /dev/null 2>&1; then
              echo "DynamoDB is ready on attempt $attempt"
              break
            fi
            echo "DynamoDB not ready, attempt $attempt/$max_attempts"
            sleep 2
            attempt=$((attempt + 1))
          done

          # Create DynamoDB tables
          yarn dynamodb:create-table
        env:
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8000

      - name: Run integration tests
        run: |
          # Integration tests would be implemented here
          echo "Integration tests would run here"
          # yarn test:integration
        env:
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8000

  # Job 7: Generate and Upload Artifacts
  artifacts:
    name: Generate Artifacts
    runs-on: ubuntu-latest
    needs: [build-and-test, docker]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build

      - name: Create deployment package
        run: |
          tar -czf aws-config-service-${{ github.sha }}.tar.gz \
            dist/ \
            package.json \
            yarn.lock \
            healthcheck.js \
            Dockerfile \
            docker-compose.yml

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aws-config-service-${{ github.sha }}
          path: aws-config-service-${{ github.sha }}.tar.gz
          retention-days: 30

  # Job 8: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, docker, dependency-check]
    if: always()

    steps:
      - name: Notify on success
        if: needs.code-quality.result == 'success' && needs.build-and-test.result == 'success' && needs.docker.result == 'success'
        run: |
          echo "✅ All CI checks passed successfully!"

      - name: Notify on failure
        if: needs.code-quality.result == 'failure' || needs.build-and-test.result == 'failure' || needs.docker.result == 'failure'
        run: |
          echo "❌ CI checks failed. Please review the failed jobs."
          exit 1
