name: Enhanced Security Auto-Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  security-review:
    name: Security Review for Auto-Approval
    runs-on: ubuntu-latest
    if: github.actor == 'llevintza'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run npm audit
        id: npm-audit
        continue-on-error: true
        run: |
          AUDIT_RESULT=$(yarn audit --json 2>/dev/null | jq -r '.data.vulnerabilities | select(.info != null) | .critical + .high')
          if [ "$AUDIT_RESULT" = "00" ] || [ -z "$AUDIT_RESULT" ]; then
            echo "✅ No critical or high vulnerabilities found"
            echo "vulnerabilities=none" >> $GITHUB_OUTPUT
          else
            echo "❌ Critical or high vulnerabilities found"
            echo "vulnerabilities=found" >> $GITHUB_OUTPUT
          fi

      - name: Check for sensitive files
        id: sensitive-files
        run: |
          # Check for accidentally committed sensitive files
          SENSITIVE_FILES=$(find . -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*secret*" -o -name "*password*" | grep -v node_modules | grep -v .git || true)
          
          if [ -z "$SENSITIVE_FILES" ]; then
            echo "✅ No sensitive files found"
            echo "sensitive_files=none" >> $GITHUB_OUTPUT
          else
            echo "❌ Sensitive files found: $SENSITIVE_FILES"
            echo "sensitive_files=found" >> $GITHUB_OUTPUT
          fi

      - name: Check code complexity
        id: complexity
        continue-on-error: true
        run: |
          # Check for overly complex functions (basic check)
          COMPLEX_FILES=$(grep -r "function\|const.*=.*=>" src/ --include="*.ts" | wc -l)
          
          if [ "$COMPLEX_FILES" -lt 100 ]; then  # Adjust threshold as needed
            echo "✅ Code complexity within acceptable limits"
            echo "complexity=acceptable" >> $GITHUB_OUTPUT
          else
            echo "⚠️ High code complexity detected"
            echo "complexity=high" >> $GITHUB_OUTPUT
          fi

      - name: Security assessment summary
        id: security-summary
        run: |
          SECURITY_SCORE=0
          
          # Calculate security score
          if [ "${{ steps.npm-audit.outputs.vulnerabilities }}" = "none" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE + 25))
          fi
          
          if [ "${{ steps.sensitive-files.outputs.sensitive_files }}" = "none" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE + 25))
          fi
          
          if [ "${{ steps.complexity.outputs.complexity }}" = "acceptable" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE + 25))
          fi
          
          # Additional 25 points for passing basic checks
          SECURITY_SCORE=$((SECURITY_SCORE + 25))
          
          echo "Security Score: $SECURITY_SCORE/100"
          
          if [ "$SECURITY_SCORE" -ge 75 ]; then
            echo "✅ Security check passed"
            echo "security_approved=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Security check failed"
            echo "security_approved=false" >> $GITHUB_OUTPUT
          fi
          
          echo "security_score=$SECURITY_SCORE" >> $GITHUB_OUTPUT

      - name: Comment security results
        run: |
          gh pr comment "${{ github.event.pull_request.number }}" --body "🔒 **Security Assessment Results**
          
          **Security Score**: ${{ steps.security-summary.outputs.security_score }}/100
          
          **Checks**:
          - Vulnerabilities: ${{ steps.npm-audit.outputs.vulnerabilities }}
          - Sensitive Files: ${{ steps.sensitive-files.outputs.sensitive_files }}
          - Code Complexity: ${{ steps.complexity.outputs.complexity }}
          
          **Result**: ${{ steps.security-summary.outputs.security_approved == 'true' && '✅ Approved for auto-review' || '❌ Manual security review required' }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
